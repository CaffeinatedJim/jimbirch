<?php

/**
 * @file
 * Shared functions for MakeUp.
 */

/**
 * Implements hook_help().
 * TODO: Give more details about the MakeUp module in the about statement
 */
function makeup_help($path, $arg) {
  switch ($path) {
    case 'admin/help#makeup':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Makeup module share functions for MakeUp.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function makeup_field_widget_info() {
  return array(
    'makeup_textarea' => array(
      'label' => t('Text area (multiple rows)'),
      'field types' => array('makeup_css', 'makeup_js'),
      'settings' => array('rows' => 5),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function makeup_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'makeup_textarea':
      $main_widget = $element + array(
        '#type' => 'textarea',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#rows' => $instance['widget']['settings']['rows'],
        '#attributes' => array('class' => array('text-full')),
      );
      break;
  }
  $element['value'] = $main_widget;

  return $element;
}

/**
 * Implements hook_field_prepare_translation().
 *
 * TODO: Test this as these should not be exposed to translation. 
 * Shouldn't we just unset the field in every case?
 */
function makeup_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {
  // If the translating user is not permitted to use the assigned text format,
  // we must not expose the source values.
  $field_name = $field['field_name'];
  if (!empty($source_entity->{$field_name}[$source_langcode])) {
    $formats = filter_formats();
    foreach ($source_entity->{$field_name}[$source_langcode] as $delta => $item) {
      $format_id = $item['format'];
      if (!empty($format_id) && !filter_access($formats[$format_id])) {
        unset($items[$delta]);
      }
    }
  }
}

/**
 * Implements hook_filter_format_update().
 */
function makeup_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function makeup_filter_format_disable($format) {
  field_cache_clear();
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add view modes to the file entity type, appropriate for displaying media.
 */
function makeup_entity_info_alter(&$entity_info) {
  $makeup = variable_get('makeup', array());
  if (isset($makeup['view_mode'])) {
    foreach ($makeup['view_mode'] as $entity => $viewmodes) {
      foreach ($viewmodes as $machine_name => $name) {
        $entity_info[$entity]['view modes'][$machine_name] = array(
          'label' => t($name),
          'custom settings' => FALSE,
        );
      }
    }
  }
  if (module_exists('makeupline') && module_exists('references_dialog')) {
    $entity_info['node']['view modes']['er_search'] = array(
      'label' => t("ER Search"),
      'custom settings' => FALSE,
    );
    $entity_info['field_collection_item']['view modes']['er_search'] = array(
      'label' => t("ER Search"),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Provide fields lists to be used as options array.
 *
 * @see field_info_instances()
 */
function makeup_fields_options_list($field_types = array(), $entity_type = NULL, $bundle_name = NULL, $required = TRUE) {
  $field_instances = field_info_instances($entity_type, $bundle_name);
  $options = ($required == TRUE) ? array() : array('' => '<None>');

  foreach ($field_instances as $field_name => $data) {
    $info = field_info_field($field_name);
    $type = $info['type'];
    if (in_array($type, $field_types) || empty($field_types)) {
      $options[$field_name] = $data['label'];
    }
  }
  // Sort in alphabetical order.
  asort($options);

  return $options;
}

